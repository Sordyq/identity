generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserDID {
  id         String   @id @default(cuid())
  did        String   @unique
  publicKey  String
  privateKey String?
  accountId  String? 
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("user_dids")
}

model VerificationChallenge {
  id        String   @id @default(cuid())
  challenge String   @unique
  did       String?
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("verification_challenges")
}

model DIDOperation {
  id              String    @id @default(cuid())
  did             String
  operationType   String
  operationData   Json
  status          String    @default("awaiting_signature")
  signingPayload  String
  signature       String?
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  signerPublicKey String?
  wcExpiry        DateTime?
  wcTopic         String?
  wcUri           String?
  messageFormatUsed String?

  @@map("did_operations")
}

model userdata_tb {
  user_id    String   @id @db.VarChar(128)
  email      String?  @unique
  pubKey     String?  // user public key hex
  privateKey String?  // ⚠️ user's private key (stored encrypted in DB)
  wallet     wallet_tb?
  txs        transaction_tb[]
}


model wallet_tb {
  id        String   @id @default(uuid())
  user_id   String   @unique
  currency  String
  accountId   String
  balance   Decimal  @db.Decimal(20, 8) @default(0.0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user userdata_tb @relation(fields: [user_id], references: [user_id])
}

model transaction_tb {
  id            String   @id @default(uuid())
  user_id       String
  type          String   // Deposit | Withdraw
  status        String   // Pending | Success | Failed
  amount        Decimal  @db.Decimal(20, 8)
  currency      String
  network       String
  walletAddress String?
  txHash        String?
  createdAt     DateTime @default(now())

  user userdata_tb @relation(fields: [user_id], references: [user_id])
}

